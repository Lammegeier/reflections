Q. What happens when you initialize a repository? Why do you need to do it?

A. It git-ifies the directory. Adds the relevant files, infrastructure so that files in the system can be tracked using the git tool.

Q. How is the staging area different from the working directory and the repository? What value do you think it offers?

A. Repository is on the server (I think... though not in the exercises we have been doing). Working directory is where I am working at the minute. I may have created one new file which isn't in the repository, in my working directory. I may have made changes to another file. In the staging area, I can choose to add only one of these changes (or a selection of changes) and commit only those at that point.

Q. How can you use the staging area to make sure you have one commit per logical change?

A. If you happen to do work which covers two areas, or you see something else whilst coding and fix a bug etc, you can sometimes stage the changes so that the two changes and the one bug fix can be in three different commits instead of lumped in together.

Q. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A. If you are working on a codebase covering lots of customers with core functionality, but one manages to negotiate (pay for?) a specific feature for themselves. OR where one customer, because of different volumes or otherwise different uses of your application, discovers a defect that other customers don't get. You may be in the situation where you feel you have to try and fix it for them, but cannot risk fixing it for others in case your fix breaks something else.

Q. How do the diagrams help you visualize the branch structure?

A. So far they don't. Found this explanation lightweight and difficult to follow. It's like the course has taken such a long time to explain all the parts, that I've forgotten what they are when its time to connect them. Seems if they had just taught the bits of that I need to know and nothing else, they could have done a better job in 5-10 mins than they have in hours.

Q. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A. The result is all the changes made in each branch are present in the post merge branch. (Trunk?)
Why we represent it in the diagram on two different lines for each branch, with each commit shown linearly, is so that we can see which commits are in each branch, hence the vertical split into two lines, but also see the timestamp/timeline of each commit in each line/branch, and ideally against each other, so we know which commit happened when, in which branch, and what each commits parent commit was.

Q. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

A. In the cases where there are no conflicts, it saves a lot of work of checking through. In the case where there are conflicts, it shows you exactly where they are. Importantly it shows you the original state of the file, and shows both conflicting pieces of code.

 

